/**
 * Service Chatbot IA Intelligent
 * Connaissance compl√®te du site et r√©ponses contextuelles
 */

// Base de connaissances du site
export const SITE_KNOWLEDGE = {
  pages: {
    accueil: {
      path: "/",
      title: "Page d'Accueil",
      description: "D√©couvrez l'exp√©rience mus√©ale r√©volutionnaire avec l'IA, la r√©alit√© augment√©e et l'innovation",
      features: ["Carrousel 3D", "Statistiques", "Fonctionnalit√©s r√©volutionnaires", "Hero section"]
    },
    collections: {
      path: "/collections",
      title: "Collections R√©volutionnaires",
      description: "Explorez nos collections num√©riques enrichies avec des mod√®les 3D et des histoires interactives",
      features: ["Navigation par cat√©gories", "Recherche avanc√©e", "Fiches d'≈ìuvres d√©taill√©es"],
      status: "En d√©veloppement"
    },
    parcours: {
      path: "/parcours",
      title: "Parcours Interactifs & Gamifi√©s",
      description: "D√©couvrez le mus√©e √† travers des qu√™tes, des d√©fis et des r√©compenses uniques",
      features: ["Cr√©ation de parcours personnalis√©s", "Suivi de progression", "Quiz culturels"],
      status: "En d√©veloppement"
    },
    realiteAugmentee: {
      path: "/realite-augmentee",
      title: "Exp√©rience en R√©alit√© Augment√©e",
      description: "Plongez au c≈ìur des ≈ìuvres avec des superpositions num√©riques interactives",
      features: ["Scanner QR int√©gr√©", "Mod√®les 3D en AR", "Animations et effets visuels"],
      status: "En d√©veloppement"
    },
    aPropos: {
      path: "/a-propos",
      title: "√Ä Propos du Mus√©e",
      description: "D√©couvrez l'histoire, la mission et l'√©quipe derri√®re le Mus√©e des Civilisations Noires",
      features: ["Pr√©sentation du mus√©e", "Informations de contact", "Partenaires"],
      status: "En d√©veloppement"
    }
  },
  oeuvres: {
    masqueBaoule: {
      title: "Masque Baoul√©",
      description: "Masque c√©r√©moniel du peuple Baoul√©, C√¥te d'Ivoire",
      periode: "XIXe si√®cle",
      region: "C√¥te d'Ivoire",
      culture: "Peuple Baoul√©"
    },
    statueAshanti: {
      title: "Statue Ashanti",
      description: "Figure royale Ashanti en bronze, Ghana",
      periode: "XVIIIe si√®cle",
      region: "Ghana",
      culture: "Peuple Ashanti"
    },
    reliquaireFang: {
      title: "Reliquaire Fang",
      description: "Reliquaire ancestral Fang, Gabon",
      periode: "XIXe si√®cle",
      region: "Gabon",
      culture: "Peuple Fang"
    }
  },
  fonctionnalites: {
    ia: {
      title: "Assistant IA",
      description: "Assistant virtuel sp√©cialis√© en culture africaine",
      capabilities: ["R√©ponses contextuelles", "Navigation assist√©e", "Informations culturelles"]
    },
    ar: {
      title: "R√©alit√© Augment√©e",
      description: "Exp√©rience immersive avec superposition num√©rique",
      capabilities: ["Scanner QR", "Mod√®les 3D", "Interactions gestuelles"]
    },
    carrousel: {
      title: "Carrousel 3D",
      description: "Navigation interactive dans les ≈ìuvres",
      capabilities: ["Rotation automatique", "Contr√¥les utilisateur", "Informations d√©taill√©es"]
    }
  }
};

// Mots-cl√©s pour la reconnaissance
export const KEYWORDS = {
  navigation: ["page", "section", "aller", "naviguer", "visiter", "voir"],
  oeuvres: ["≈ìuvre", "masque", "statue", "reliquaire", "art", "culture"],
  fonctionnalites: ["ia", "ar", "r√©alit√© augment√©e", "carrousel", "3d"],
  informations: ["quoi", "comment", "o√π", "quand", "pourquoi", "expliquer"]
};

/**
 * Analyse intelligente de la question utilisateur
 */
export const analyzeUserQuestion = (question: string): {
  intent: string;
  entities: string[];
  confidence: number;
} => {
  const questionLower = question.toLowerCase();
  let intent = "general";
  const entities: string[] = [];
  let confidence = 0.5;

  // D√©tection d'intention de navigation
  if (KEYWORDS.navigation.some(keyword => questionLower.includes(keyword))) {
    intent = "navigation";
    confidence = 0.8;
  }

  // D√©tection d'intention sur les ≈ìuvres
  if (KEYWORDS.oeuvres.some(keyword => questionLower.includes(keyword))) {
    intent = "oeuvres";
    confidence = 0.9;
  }

  // D√©tection d'intention sur les fonctionnalit√©s
  if (KEYWORDS.fonctionnalites.some(keyword => questionLower.includes(keyword))) {
    intent = "fonctionnalites";
    confidence = 0.9;
  }

  // D√©tection d'entit√©s
  Object.keys(SITE_KNOWLEDGE.pages).forEach(pageKey => {
    const page = SITE_KNOWLEDGE.pages[pageKey as keyof typeof SITE_KNOWLEDGE.pages];
    if (questionLower.includes(page.title.toLowerCase()) || 
        questionLower.includes(pageKey)) {
      entities.push(pageKey);
    }
  });

  Object.keys(SITE_KNOWLEDGE.oeuvres).forEach(oeuvreKey => {
    const oeuvre = SITE_KNOWLEDGE.oeuvres[oeuvreKey as keyof typeof SITE_KNOWLEDGE.oeuvres];
    if (questionLower.includes(oeuvre.title.toLowerCase()) || 
        questionLower.includes(oeuvreKey)) {
      entities.push(oeuvreKey);
    }
  });

  return { intent, entities, confidence };
};

/**
 * G√©n√©ration de r√©ponse intelligente
 */
export const generateIntelligentResponse = (question: string): {
  text: string;
  links?: { text: string; url: string }[];
  tags: string[];
  confidence: number;
} => {
  const analysis = analyzeUserQuestion(question);
  const questionLower = question.toLowerCase();

  // R√©ponses de navigation
  if (analysis.intent === "navigation") {
    const pageEntity = analysis.entities.find(entity => 
      Object.keys(SITE_KNOWLEDGE.pages).includes(entity)
    );
    
    if (pageEntity) {
      const page = SITE_KNOWLEDGE.pages[pageEntity as keyof typeof SITE_KNOWLEDGE.pages];
      return {
        text: `Je vous guide vers la ${page.title}. ${page.description}`,
        links: [{
          text: `Visiter ${page.title}`,
          url: page.path
        }],
        tags: ["Navigation", "Guide"],
        confidence: 0.9
      };
    }

    // Navigation g√©n√©rale
    return {
      text: "Voici les sections principales de notre mus√©e :",
      links: [
        { text: "üè† Page d'Accueil", url: "/" },
        { text: "üé® Collections", url: "/collections" },
        { text: "üó∫Ô∏è Parcours", url: "/parcours" },
        { text: "ü•Ω R√©alit√© Augment√©e", url: "/realite-augmentee" },
        { text: "‚ÑπÔ∏è √Ä Propos", url: "/a-propos" }
      ],
      tags: ["Navigation", "Guide"],
      confidence: 0.8
    };
  }

  // R√©ponses sur les ≈ìuvres
  if (analysis.intent === "oeuvres") {
    const oeuvreEntity = analysis.entities.find(entity => 
      Object.keys(SITE_KNOWLEDGE.oeuvres).includes(entity)
    );
    
    if (oeuvreEntity) {
      const oeuvre = SITE_KNOWLEDGE.oeuvres[oeuvreEntity as keyof typeof SITE_KNOWLEDGE.oeuvres];
      return {
        text: `${oeuvre.title} : ${oeuvre.description}. P√©riode : ${oeuvre.periode}, R√©gion : ${oeuvre.region}, Culture : ${oeuvre.culture}.`,
        tags: ["≈íuvre", "Culture", oeuvre.culture],
        confidence: 0.95
      };
    }

    return {
      text: "Nos collections incluent des masques Baoul√©, des statues Ashanti et des reliquaires Fang. Chaque ≈ìuvre raconte une histoire unique de notre patrimoine africain.",
      tags: ["Collections", "Patrimoine"],
      confidence: 0.8
    };
  }

  // R√©ponses sur les fonctionnalit√©s
  if (analysis.intent === "fonctionnalites") {
    if (questionLower.includes("ia") || questionLower.includes("assistant")) {
      return {
        text: "Je suis votre assistant IA sp√©cialis√© en culture africaine. Je peux vous guider, r√©pondre √† vos questions et vous aider √† naviguer dans le mus√©e.",
        tags: ["IA", "Assistant"],
        confidence: 0.9
      };
    }

    if (questionLower.includes("ar") || questionLower.includes("r√©alit√© augment√©e")) {
      return {
        text: "La r√©alit√© augment√©e vous permet d'explorer les ≈ìuvres en 3D, de scanner des QR codes pour des informations d√©taill√©es et d'interagir avec le patrimoine de mani√®re immersive.",
        links: [{
          text: "Essayer la R√©alit√© Augment√©e",
          url: "/realite-augmentee"
        }],
        tags: ["AR", "Innovation"],
        confidence: 0.9
      };
    }
  }

  // R√©ponses contextuelles g√©n√©rales
  if (questionLower.includes("bonjour") || questionLower.includes("salut")) {
    return {
      text: "Bonjour ! Je suis votre guide virtuel du Mus√©e des Civilisations Noires. Comment puis-je vous aider √† d√©couvrir notre patrimoine africain ?",
      tags: ["Accueil", "Guide"],
      confidence: 0.9
    };
  }

  if (questionLower.includes("aide") || questionLower.includes("help")) {
    return {
      text: "Je peux vous aider √† :\n‚Ä¢ Naviguer dans le mus√©e\n‚Ä¢ D√©couvrir nos ≈ìuvres\n‚Ä¢ Utiliser nos fonctionnalit√©s\n‚Ä¢ R√©pondre √† vos questions culturelles\n\nQue souhaitez-vous explorer ?",
      tags: ["Aide", "Guide"],
      confidence: 0.9
    };
  }

  // R√©ponse par d√©faut intelligente
  return {
    text: "Je comprends votre question. Pouvez-vous me donner plus de d√©tails ? Je peux vous aider avec la navigation, les ≈ìuvres, ou nos fonctionnalit√©s innovantes.",
    tags: ["Clarification"],
    confidence: 0.6
  };
};

/**
 * Service principal du chatbot
 */
export class ChatbotService {
  private static instance: ChatbotService;
  private conversationHistory: Array<{role: string, content: string}> = [];

  static getInstance(): ChatbotService {
    if (!ChatbotService.instance) {
      ChatbotService.instance = new ChatbotService();
    }
    return ChatbotService.instance;
  }

  async processMessage(userMessage: string): Promise<{
    response: string;
    links?: { text: string; url: string }[];
    tags: string[];
    confidence: number;
  }> {
    // Ajouter le message utilisateur √† l'historique
    this.conversationHistory.push({ role: "user", content: userMessage });

    // G√©n√©rer une r√©ponse intelligente
    const response = generateIntelligentResponse(userMessage);

    // Ajouter la r√©ponse √† l'historique
    this.conversationHistory.push({ role: "assistant", content: response.text });

    // Limiter l'historique √† 10 messages
    if (this.conversationHistory.length > 10) {
      this.conversationHistory = this.conversationHistory.slice(-10);
    }

    return {
      response: response.text,
      links: response.links,
      tags: response.tags,
      confidence: response.confidence
    };
  }

  getConversationHistory() {
    return this.conversationHistory;
  }

  clearHistory() {
    this.conversationHistory = [];
  }
}
