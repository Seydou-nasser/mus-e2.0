import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useTheme } from './ThemeProvider';
import { useContexteIA } from './ContexteIA';
import { useTranslation } from 'react-i18next';
import { 
  X, 
  Mic, 
  MicOff, 
  Send, 
  Search, 
  Sparkles, 
  Brain, 
  Zap,
  Volume2,
  VolumeX,
  Settings,
  Heart,
  Star,
  MessageCircle,
  User,
  Bot
} from 'lucide-react';

/**
 * Interface Chatbot R√©volutionnaire - Design Africain Authentique
 * Interface immersive avec th√®me adaptatif et responsivit√© parfaite
 */
const ChatbotInterface: React.FC = () => {
  const { isDarkMode, getThemeClasses } = useTheme();
  const { isIAEnLigne, isChatbotOpen, setIsChatbotOpen } = useContexteIA();
  const { t } = useTranslation();
  const themeClasses = getThemeClasses();
  
  const [messages, setMessages] = useState<Array<{
    id: number;
    text: string;
    isUser: boolean;
    timestamp: Date;
    tags?: string[];
    score?: number;
    isLiked?: boolean;
    isStarred?: boolean;
    isBookmarked?: boolean;
    category?: string;
    confidence?: number;
  }>>([
    {
      id: 1,
      text: "Bonjour ! Je suis votre guide virtuel sp√©cialis√© en civilisations africaines. Parlez-moi, et je vous guiderai dans votre d√©couverte culturelle ! üßô‚Äç‚ôÇÔ∏èüé≠‚≠ê",
      isUser: false,
      timestamp: new Date(),
      tags: ["G√©n√©ral", "Contemporain"],
      score: 0,
      isLiked: false,
      isStarred: false,
      isBookmarked: false,
      category: "Accueil",
      confidence: 95
    }
  ]);
  
  const [inputText, setInputText] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [showHistory, setShowHistory] = useState(false);
  const [showScoring, setShowScoring] = useState(false);
  const [filteredMessages, setFilteredMessages] = useState<any[]>([]);
  const [isMinimized, setIsMinimized] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Auto-scroll vers le bas
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus sur l'input quand l'interface s'ouvre
  useEffect(() => {
    if (isChatbotOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isChatbotOpen]);

  const handleSendMessage = () => {
    if (inputText.trim()) {
      const newMessage = {
        id: messages.length + 1,
        text: inputText,
        isUser: true,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, newMessage]);
      setInputText('');
      
      // Simulation de r√©ponse IA
      setTimeout(() => {
        const responses = [
          "Fascinant ! Votre curiosit√© me r√©jouit. Cette pi√®ce raconte une histoire unique de notre continent.",
          "Excellente question ! Laissez-moi vous expliquer l'importance culturelle de cette ≈ìuvre.",
          "Je suis ravi de partager mes connaissances sur cette civilisation avec vous !",
          "Cette ≈ìuvre t√©moigne de la richesse artistique de notre patrimoine africain."
        ];
        
        const aiResponse = {
          id: messages.length + 2,
          text: responses[Math.floor(Math.random() * responses.length)],
          isUser: false,
          timestamp: new Date(),
          tags: ["Zoulou", "XIXe si√®cle"]
        };
        
        setMessages(prev => [...prev, aiResponse]);
      }, 1000);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const toggleRecording = () => {
    setIsRecording(!isRecording);
    // Simulation d'enregistrement vocal
    if (!isRecording) {
      setTimeout(() => setIsRecording(false), 3000);
    }
  };

  const togglePlayback = () => {
    setIsPlaying(!isPlaying);
    // Simulation de lecture audio
    if (!isPlaying) {
      setTimeout(() => setIsPlaying(false), 2000);
    }
  };

  // Fonctions de scoring et interaction
  const handleScoreMessage = (messageId: number, score: number) => {
    setMessages(prev => prev.map(msg => 
      msg.id === messageId ? { ...msg, score } : msg
    ));
  };

  const handleLikeMessage = (messageId: number) => {
    setMessages(prev => prev.map(msg => 
      msg.id === messageId ? { ...msg, isLiked: !msg.isLiked } : msg
    ));
  };

  const handleStarMessage = (messageId: number) => {
    setMessages(prev => prev.map(msg => 
      msg.id === messageId ? { ...msg, isStarred: !msg.isStarred } : msg
    ));
  };

  const handleBookmarkMessage = (messageId: number) => {
    setMessages(prev => prev.map(msg => 
      msg.id === messageId ? { ...msg, isBookmarked: !msg.isBookmarked } : msg
    ));
  };

  // Filtrage des messages
  const filterMessages = (filter: string) => {
    if (filter === 'all') {
      setFilteredMessages(messages);
    } else if (filter === 'liked') {
      setFilteredMessages(messages.filter(msg => msg.isLiked));
    } else if (filter === 'starred') {
      setFilteredMessages(messages.filter(msg => msg.isStarred));
    } else if (filter === 'bookmarked') {
      setFilteredMessages(messages.filter(msg => msg.isBookmarked));
    }
  };

  if (!isChatbotOpen) return null;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 20 }}
      transition={{ duration: 0.3, ease: "easeOut" }}
      className={`fixed bottom-6 right-6 ${isDarkMode ? 'bg-gray-900' : 'bg-white'} rounded-3xl shadow-2xl overflow-hidden z-[10000] border-2 ${isDarkMode ? 'border-gray-700' : 'border-gray-200'} ${
        isFullscreen 
          ? 'inset-4 w-auto h-auto' 
          : isMinimized 
            ? 'w-80 h-16' 
            : 'w-96 h-[70vh]'
      }`}
    >
        {/* Header avec profil Assistant - Toujours visible */}
        <div className={`p-4 ${isDarkMode ? 'bg-gray-800' : 'bg-gray-100'} border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'} sticky top-0 z-10`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              {/* Avatar Assistant */}
              <motion.div
                whileHover={{ scale: 1.1, rotate: 5 }}
                className="relative"
              >
                <div className="w-12 h-12 bg-gradient-to-r from-pink-500 to-purple-600 rounded-full flex items-center justify-center shadow-lg">
                  <Bot className="w-6 h-6 text-white" />
                </div>
                <motion.div
                  className="absolute -top-1 -right-1 w-4 h-4 bg-yellow-400 rounded-full flex items-center justify-center"
                  animate={{ rotate: 360 }}
                  transition={{ duration: 2, repeat: Infinity }}
                >
                  <Sparkles className="w-2 h-2 text-white" />
                </motion.div>
              </motion.div>
              
              <div>
                <h3 className={`text-lg font-bold ${themeClasses.text}`}>Assistant IA</h3>
                <p className={`text-sm ${themeClasses.textSecondary}`}>Sp√©cialiste Civilisations Africaines</p>
                <div className="flex items-center space-x-2 mt-1">
                  <div className={`w-2 h-2 rounded-full ${isIAEnLigne ? 'bg-green-500' : 'bg-red-500'}`}></div>
                  <span className={`text-xs ${themeClasses.textSecondary}`}>
                    {isIAEnLigne ? 'En ligne' : 'Hors ligne'}
                  </span>
                  <div className="flex items-center space-x-1">
                    <Brain className="w-3 h-3 text-blue-400" />
                    <span className="text-xs text-blue-400">95%</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Zap className="w-3 h-3 text-yellow-400" />
                    <span className="text-xs text-yellow-400">85%</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={() => setIsMinimized(!isMinimized)}
                className="p-2 bg-blue-500 rounded-lg text-white"
                title={isMinimized ? "Agrandir" : "R√©duire"}
              >
                {isMinimized ? <MessageCircle className="w-4 h-4" /> : <X className="w-4 h-4" />}
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={() => setIsFullscreen(!isFullscreen)}
                className="p-2 bg-purple-500 rounded-lg text-white"
                title={isFullscreen ? "Mode normal" : "Plein √©cran"}
              >
                <Settings className="w-4 h-4" />
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={() => setIsChatbotOpen(false)}
                className="p-2 bg-red-500 rounded-lg text-white"
                title="Fermer"
              >
                <X className="w-4 h-4" />
              </motion.button>
            </div>
          </div>
        </div>

        {/* Zone de messages avec scoring et historique - Scrollable */}
        {!isMinimized && (
          <div className="flex-1 overflow-y-auto p-4 space-y-4 scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200">
          {/* Barre de filtres et historique */}
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setShowHistory(!showHistory)}
                className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'} ${themeClasses.text}`}
              >
                <MessageCircle className="w-4 h-4" />
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setShowScoring(!showScoring)}
                className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'} ${themeClasses.text}`}
              >
                <Star className="w-4 h-4" />
              </motion.button>
            </div>
            
            <div className="flex items-center space-x-1">
              <button onClick={() => filterMessages('all')} className="px-2 py-1 text-xs bg-blue-500 text-white rounded">Tous</button>
              <button onClick={() => filterMessages('liked')} className="px-2 py-1 text-xs bg-red-500 text-white rounded">Liked</button>
              <button onClick={() => filterMessages('starred')} className="px-2 py-1 text-xs bg-yellow-500 text-white rounded">Starred</button>
            </div>
          </div>

          {(showHistory ? filteredMessages : messages).map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`max-w-[80%] ${message.isUser ? 'order-2' : 'order-1'}`}>
                {!message.isUser && (
                  <div className="flex items-center space-x-2 mb-1">
                    <div className="w-6 h-6 bg-gradient-to-r from-pink-500 to-purple-600 rounded-full flex items-center justify-center">
                      <Bot className="w-3 h-3 text-white" />
                    </div>
                    <span className={`text-xs ${themeClasses.textSecondary}`}>Assistant IA</span>
                    {message.confidence && (
                      <span className="text-xs text-green-400">({message.confidence}%)</span>
                    )}
                  </div>
                )}
                
                <motion.div
                  className={`p-3 rounded-2xl relative ${
                    message.isUser
                      ? `${isDarkMode ? 'bg-green-600' : 'bg-green-500'} text-white`
                      : `${isDarkMode ? 'bg-blue-900' : 'bg-blue-100'} ${themeClasses.text}`
                  }`}
                  whileHover={{ scale: 1.02 }}
                >
                  <p className="text-sm">{message.text}</p>
                  
                  {message.tags && (
                    <div className="flex flex-wrap gap-1 mt-2">
                      {message.tags.map((tag, index) => (
                        <motion.span
                          key={index}
                          whileHover={{ scale: 1.05 }}
                          className={`px-2 py-1 rounded-full text-xs ${
                            index === message.tags!.length - 1
                              ? 'bg-blue-600 text-white'
                              : `${isDarkMode ? 'bg-blue-800' : 'bg-blue-200'} ${themeClasses.text}`
                          }`}
                        >
                          {tag}
                        </motion.span>
                      ))}
                    </div>
                  )}

                  {/* Syst√®me de scoring innovant */}
                  {showScoring && !message.isUser && (
                    <div className="flex items-center justify-between mt-3 pt-2 border-t border-gray-300/20">
                      <div className="flex items-center space-x-2">
                        <span className="text-xs text-gray-500">Score:</span>
                        <div className="flex space-x-1">
                          {[1, 2, 3, 4, 5].map((star) => (
                            <motion.button
                              key={star}
                              whileHover={{ scale: 1.2 }}
                              whileTap={{ scale: 0.9 }}
                              onClick={() => handleScoreMessage(message.id, star)}
                              className={`w-4 h-4 ${
                                star <= (message.score || 0) ? 'text-yellow-400' : 'text-gray-400'
                              }`}
                            >
                              <Star className="w-full h-full" />
                            </motion.button>
                          ))}
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-1">
                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => handleLikeMessage(message.id)}
                          className={`p-1 rounded-full ${
                            message.isLiked ? 'bg-red-500' : 'bg-gray-400'
                          }`}
                        >
                          <Heart className={`w-3 h-3 ${message.isLiked ? 'text-white' : 'text-gray-600'}`} />
                        </motion.button>
                        
                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => handleStarMessage(message.id)}
                          className={`p-1 rounded-full ${
                            message.isStarred ? 'bg-yellow-500' : 'bg-gray-400'
                          }`}
                        >
                          <Star className={`w-3 h-3 ${message.isStarred ? 'text-white' : 'text-gray-600'}`} />
                        </motion.button>
                      </div>
                    </div>
                  )}
                </motion.div>
                
                <div className="flex items-center justify-between mt-1">
                  <span className={`text-xs ${themeClasses.textSecondary} ${
                    message.isUser ? 'text-right' : 'text-left'
                  }`}>
                    {message.timestamp.toLocaleTimeString()}
                  </span>
                  
                  {message.score && message.score > 0 && (
                    <div className="flex items-center space-x-1">
                      <Star className="w-3 h-3 text-yellow-400" />
                      <span className="text-xs text-yellow-400">{message.score}/5</span>
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          ))}
          <div ref={messagesEndRef} />
        </div>
        )}

        {/* Barre d'input */}
        {!isMinimized && (
          <div className={`p-4 ${isDarkMode ? 'bg-gray-800' : 'bg-gray-100'} border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
          <div className="flex items-center space-x-2">
            <div className="flex-1 relative">
              <input
                ref={inputRef}
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Posez votre question..."
                className={`w-full p-3 pr-12 rounded-2xl border-2 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-all ${
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                    : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                }`}
              />
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={toggleRecording}
                className={`absolute right-3 top-1/2 transform -translate-y-1/2 p-1 rounded-full ${
                  isRecording ? 'bg-red-500' : 'bg-gray-400'
                }`}
              >
                {isRecording ? <MicOff className="w-4 h-4 text-white" /> : <Mic className="w-4 h-4 text-white" />}
              </motion.button>
            </div>
            
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={handleSendMessage}
              disabled={!inputText.trim()}
              className={`p-3 rounded-full ${
                inputText.trim() 
                  ? 'bg-green-500 hover:bg-green-600' 
                  : 'bg-gray-400 cursor-not-allowed'
              } text-white transition-colors`}
            >
              <Send className="w-4 h-4" />
            </motion.button>
          </div>
          
          {/* Actions rapides */}
          <div className="flex items-center justify-between mt-3">
            <div className="flex items-center space-x-2">
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={togglePlayback}
                className={`p-2 rounded-full ${
                  isPlaying ? 'bg-blue-500' : 'bg-gray-400'
                } text-white`}
              >
                {isPlaying ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
              </motion.button>
              
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                className="p-2 bg-orange-500 rounded-full text-white"
              >
                <Search className="w-4 h-4" />
              </motion.button>
            </div>
            
            <div className="flex items-center space-x-1">
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                className="p-2 bg-red-500 rounded-full text-white"
              >
                <Heart className="w-4 h-4" />
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                className="p-2 bg-yellow-500 rounded-full text-white"
              >
                <Star className="w-4 h-4" />
              </motion.button>
            </div>
          </div>
        </div>
        )}
      </motion.div>
    </motion.div>
  );
};

export default ChatbotInterface;
